{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c20000\c20000\c20000;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
Support for a bit type began with MySQL version 5.03.\
Before that the bit type was simply mapped to tiny int and didn't work very well. \
Because of this legacy, it's gotten a bad reputation. But as of MySQL 5.6, it works just fine, and it can be useful. \
\
So we're going to start with the scratch database here. And we're just going to create a simple table. I'll start as always with the Drop Table If Exists.\cb1 \
\cb3 And we'll create a table and we'll give it a ID column, and a couple of BIT columns. So I have here a three-bit column and a five-bit column, together three and five is eight, so these two columns are going to just take up eight bits. And they'll all be packed into one eight bit unit, into one eight bit byte. The Bit type is designed to conserve space as much as possible. You can define several columns of various bit lengths in a single table, and MySQL will pack these into as few units of storage as possible, usually on eight-bit boundaries.\cb1 \
\cb3 So let's go ahead and add some values to this. Now we note that the largest decimal number you can express in three bits is a seven, so we'll say five, six and seven. And the largest number that you can express in five bits is a 31. And we'll just go one past that and see what happens if you try to put an eight in the three bit column or a 32 in the five bit column. And I'll just do a Select Star From Test.\cb1 \
\cb3 I'll go ahead and run that. And so you notice that we have five, six, seven and then another seven, even though we inserted an eight, and we have a 29, 30, 31, 31 even though we inserted a 32. And in fact, if I try and put something outrageously large in here, it doesn't wrap around the bits or anything like that, it just gives you the maximum value. So, we still have 31s down there. So I'm going to go ahead and drop this table so that our database is back to its original condition.\cb1 \
\cb3 The bit type is a convenient compact storage type for small values that can aggregate to take up as little space as possible.}