{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red251\green255\blue202;\red255\green255\blue255;
}
{\*\expandedcolortbl;;\cssrgb\c20000\c20000\c20000;\cssrgb\c98824\c100000\c83137;\cssrgb\c100000\c100000\c100000;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
MySQL provides string types for a variety of purposes.\cb4  \
\
Character strings are used to store text based strings. \
\
Binary strings store non-text based data. \
\
Fixed length strings - padded and always use the same amount of storage. \
\
Variable length strings use less storage when the strings are shorter, \
\
Large object storage is used for storing documents and media files. \
\
\
Character strings come in 2 varieties. \
	CHAR(length)\
	VARCHAR(length)\
\
The CHAR string is a fixed length string.\cb1 \
\cb4 The parameters used to define the length of the string. \
\
if you specify a length of 5,\
	CHAR(5)\
the string will \ul always be 5 characters in length\ulnone . \
	If you put fewer than 5 characters in the string, \
		it will add spaces at the end of the string to pad it out to 5 characters, \
		when you retrieve the string from the table, any padded spaces are removed first. \
\
The VARCHAR string is variable in length. The parameter is used to limit the length of the string. \
\
if you specify a length of 25\
	VARCHAR(25)\
the string will have Up to 25 characters, \
	plus the 1 or 2 byte length value.\
if you put 10 characters in the string, it will use 11 bytes of storage. \
\
So in practical terms \
used fixed length CHAR strings \
	items of predictable size like \
		postal codes \
		fixed size abbreviations \
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf2 VARCHAR
\f0\b0  for variable length strings with a reasonable maximum size	\
	names, \
	titles\
	moderate sized units of writing. \
\
\

\f1\b \ul Binary strings \
\pard\pardeftab720\partightenfactor0

\f0\b0 \cf2 \ulnone BINARY(length)\
	work exactly like character strings \
		except No character set \
	they use binary collation. \
	works just like the CHAR type, \
		binary columns padded with zeroes Not space characters  \cb1 \
\cb4 			the zeroes are stripped when the data is read from the table. \
\
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf2 VARBINARY(length)
\f0\b0  \
	works just like VARCHAR, \
		with No character set, \
	  and with binary collation. \
\
\

\f1\b \ul Large object storage 
\f0\b0 \ulnone \
	stored separately from the table row, \
		the size of these columns does Not count against the hard limit on the size of the row. \
	BLOB objects - binary large objects,\
			Not have any character set \
			use binary collation. \
	Text objects like blobs, \
		Do use a character set And coalition.\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \
\cb4 table - different sizes and storage requirements of the different large objects.\
\
Data Type					Storage required\
TINYBLOB, TINYTEXT			up to 256 + 1 bytes\
BLOB, TEXT 					up to 65,536 + 2 bytes\
MEDIUMBLOB, MEDIUMTEXT 	up to 16777216 + 3 bytes\
LONGBLOB, LONGTEXT 		up to 4294967296 + 4 bytes\
\
\
For most purposes I use \
	TINYBLOB is small enough; use a  VARCHAR or VARBINARY instead\
	BLOB or TEXT \
	LONGBLOB or LONGTEXT\
		if the 64k version is Not big enough. \
		The difference in overhead between MEDIUM and LONG 					versions is negligible\
	\
MySQL provides a good set of string types that should suit most every need. The official list of string types also includes a couple of the special types that I'll deal with separately later in this chapter.}