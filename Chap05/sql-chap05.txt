-- 01 String functions
-- database: world

-- query gets length of the LocalName from the Country table.
-- 	alias len
SELECT Name, LocalName, LENGTH(LocalName) AS len FROM Country WHERE Continent = 'Europe' ORDER BY len DESC;

-- Greece Ella'da 	7 bytes
-- accent letter takes up 2 bytes in UTF8
-- Espan~a 		7 bytes


-- CHAR_LENGTH - only character length
SELECT Name, LocalName, LENGTH(LocalName) AS len, CHAR_LENGTH(LocalName) as chars
    FROM Country WHERE Continent = 'Europe' ORDER BY len DESC;

-- Espan~a is now 6 bytes Not 7
-- Roma^nia 7 bytes		



-- LEFT(Name, 3) - left 3 characters of the Name column
-- RIGHT(Name, 3) - rightmost 3 chars
-- MID(Name, 2, 3) - starting with 2nd char; 3 chars
SELECT Name, LEFT(Name, 3), RIGHT(Name, 3), MID(Name, 2, 3) FROM Country WHERE Continent = 'Europe';


-- concatenate, Name and LocalName. 
-- take those two columns and jam them together
SELECT CONCAT(Name, LocalName ) FROM Country WHERE Continent = 'Europe';

-- concatenate with separator, WS
SELECT CONCAT_WS(', ', Name, LocalName, Region, Continent ) FROM Country WHERE Continent = 'Europe';

SELECT CONCAT_WS('/ ', Name, LocalName, Region, Continent ) FROM Country WHERE Continent = 'Europe';


// LOCATE function - locate a string within another string
SELECT LOCATE('bar', 'foobarbaz');
// gives starting char position of bar in foobarbaz
// I.e. 4

// locate stan in Name column
SELECT Name, LOCATE('stan', Name) FROM Country WHERE Name LIKE '%stan%';

// countries with k in them
SELECT Name, LOCATE('k', Name) FROM Country WHERE Name LIKE '%k%';


//Upper case 
SELECT Name, UPPER(Name), LocalName, UPPER(LocalName) FROM Country WHERE Continent = 'Europe';

//Lower case
SELECT Name, LOWER(Name), LocalName, LOWER(LocalName) FROM Country WHERE Continent = 'Europe';

// Reverse
SELECT Name, REVERSE(Name), LocalName, REVERSE(LocalName) FROM Country WHERE Continent = 'Europe';



-- 02 Numeric functions and operators
-- database: world

SELECT 7 + 3; -- 10
SELECT 7 - 3; -- 4
SELECT 7 * 3; -- 21
SELECT 7 / 3; -- 2.3333

// Int division
SELECT 7 DIV 3; 

// Remainder - MOD
SELECT 7 MOD 3;

// % the MOD symbol
SELECT 7 % 3;

// Power function
SELECT POWER(7, 3), 7 * 7 * 7; -- 343
Or
SELECT POW(7, 3), 7 * 7 * 7; -- 343

-- absolute value
SELECT ABS(7);	-- 7
SELECT ABS(-7);	-- 7


-- Sign
SELECT SIGN(7);  -- 1
SELECT SIGN(-7); -- -1

-- Convert from base to base
-- base 10 to base 16
SELECT CONV(57, 10, 16); -- 39

-- base 16 to base 10
SELECT CONV(39, 16, 10); -- 57

-- base 10 to base 32
SELECT CONV(57, 10, 32);

/*
And if I take the 57, again from base 10, and convert it to base 32. I get 1P, so the limit here is base 36, and that's because that is 10 plus the number of letters in the letters part of the ASCII character set. And so the limit of bases for the CONV function from base 2 to base 36. And so it's using letters for those numbers that are greater than.

The digits in the character set. So here, because 57 in base 32 is a 1, and then a large number, it's using the letter P for that large number. 
*/


SELECT PI(); 		-- 3.141593
SELECT ROUND(PI());	-- 3
SELECT ROUND(PI(), 2);	-- 3.14
SELECT ROUND(PI(), 3);	-- 3.141
SELECT TRUNCATE(PI(), 3); -- 3.142 b/c next nor is a 5
SELECT CEIL(PI());	  -- 4 always rounds up			
SELECT FLOOR(PI());	-- 3 always rounds down

-- random number generator
-- w/o seed
SELECT Name, RAND() FROM Country LIMIT 5; -- get a set of random numbers

-- with seed of 7 as starting number, I get the same set
SELECT Name, RAND(7) FROM Country LIMIT 5;



-- 03 Date and time functions
-- database: none

-- current date and time in UTC universal time
SELECT NOW();
-- or
SELECT CURRENT_TIMESTAMP();

-- a Unix timestamp 
-- an integer that represents the number of seconds since January 1st, 1970, 
-- at midnight at the beginning of the day, UTC.
SELECT UNIX_TIMESTAMP();


SELECT UTC_TIMESTAMP();

-- the name of the day
SELECT DAYNAME(NOW());

-- day of the month
SELECT DAYOFMONTH(NOW());

-- day of the week
SELECT DAYOFWEEK(NOW());

-- day of the year
SELECT DAYOFYEAR(NOW());

-- month name
SELECT MONTHNAME(NOW());

-- time to seconds; 
-- nbr of seconds '00:03:00' represents
SELECT TIME_TO_SEC('00:03:00');

-- Seconds to time; will give 00:30:00
SELECT SEC_TO_TIME(180);

-- ADDTIME; gives 01:29:45
SELECT ADDTIME('1:00:00', '00:29:45');

-- SUBTIME; gives 01:15:00
SELECT SUBTIME('1:30:00', '00:15:00');

-- ADDDATE; gives 2008-02-02
SELECT ADDDATE('2008-01-02', INTERVAL 31 DAY);

-- SUBDATE; gives 2007-12-02
SELECT SUBDATE('2008-01-02', INTERVAL 31 DAY);

-- Intervals are available for 
-- 	hour, minute, second, day, week, month year and quarter. 
--	microsecond - some platforms. 




-- 04 Time zone support
-- 	on a number of different levels, 
--	for most purposes the "session" time zone setting.
-- database: none

-- show time-related variables in the system
SHOW VARIABLES LIKE '%time_zone%';
--	Variable_name	 Value
--	system_time_zone MST
--	time_zone	 UTC (if System or else, don't have time-zone support on system)
-- SID sets time_zone to UTC

SELECT NOW();
-- displays current time in UTC

SET time_zone = 'US/Eastern';
SHOW VARIABLES LIKE '%time_zone%';
--	Variable_name	 Value
--	system_time_zone MST
--	time_zone	 US/Eastern 

SELECT NOW();
-- displays current time in US/Eastern - 4 hours earlier

-- http://en.wikipedia.org/wiki/List_of_tz_database_time_zones
-- 	org by region, city, zone

SET time_zone = 'US/Pacific';
SHOW VARIABLES LIKE '%time_zone%';
--	Variable_name	 Value
--	system_time_zone MST
--	time_zone	 US/Pacific 

SELECT NOW();
-- displays current time in US/Eastern - 3 hours earlier



-- 05 DATE_FORMAT
-- 	used for formatting date and time values as strings for display.
-- database: none

-- 1st arg a date I.e. NOW(); 2nd arg format string
SELECT DATE_FORMAT(NOW(), '%W, %D of %M, %Y');
--i.e. Thursday, 27th of March, 2014

-- std SQL format
SELECT DATE_FORMAT(NOW(), '%Y-%m-%d %T');
-- 2014-03-27 05:06:28



-- 06 Aggregates
-- Aggregate functions operate on a set of rows rather than row by row
-- database: world


-- returns 1 result for a number of rows I.e. 239
-- * is All
SELECT COUNT(*) FROM Country;

-- the non-NULL values in a column:
SELECT COUNT(Population) FROM Country;


-- GROUP BY for aggregate functions
--	Group by continent; give a count by each group 
-- get one row in the result for each continent, 
--	with a count of how many rows there are in that continent. 
--	ordered by that count in descending order. 
SELECT Continent, COUNT(*) AS Count FROM Country GROUP BY Continent ORDER BY Count DESC;

-- Continent	Count
-- Africa	 58
-- Asia		 51
-- Europe	 46
-- North America 37	
-- Oceania	 28
-- South America 14
-- Antartica	  5

-- how many distinct values I.e. 7
-- DISTINCT - count only once
SELECT COUNT(DISTINCT Continent) FROM Country ;


-- GROUP_CONCAT - concatenate a nbr of values in a group
SELECT GROUP_CONCAT(Name) FROM Country WHERE Region = 'Western Europe';

-- GROUP_CONCAT(Name)
-- Austria,Belgium,Switzerland,Germany,Ferance,Liechtenstein,Luxembourg,Monaca,Netherlands


-- get a row for each region
-- separator is comma
SELECT GROUP_CONCAT(Name) FROM Country GROUP BY Region;

-- change separator to '/'
SELECT GROUP_CONCAT(Name SEPARATOR '/') FROM Country GROUP BY Region;

-- put A's first
SELECT GROUP_CONCAT(DISTINCT Continent ORDER BY Continent SEPARATOR '/') FROM Country;


// Avg population - 20360844.4444
SELECT AVG(Population) FROM Country WHERE Region = 'Western Europe';

// Min 32300 and Max 82164700 of Population
SELECT MIN(Population), MAX(Population) FROM Country WHERE Region = 'Western Europe';

// Sum 183247600; Std Deviation(STD) 27890838.388940994
SELECT SUM(Population), STD(Population) FROM Country WHERE Region = 'Western Europe';


-- 07 CASE
-- MySQL supports the standard SQL conditional expression syntax
-- database: scratch

DROP TABLE IF EXISTS booltest;
CREATE TABLE booltest (a INTEGER, b INTEGER);

-- 1 boolean true; 0 false
INSERT INTO booltest VALUES (1, 0); 

SELECT * FROM booltest;
-- a b
-- 1 0


-- if a is 'true', returns true, else 'false' named as boolA
-- if b is 'true', returns true, else 'false' named as boolB
-- CASE WHEN clause with boolean expression, 
--	THEN, 
--	optional ELSE, 
--	END completes the syntax
--	AS alias
SELECT
    CASE WHEN a THEN 'true' ELSE 'false' END as boolA,
    CASE WHEN b THEN 'true' ELSE 'false' END as boolB
    FROM booltest
;

-- boolA boolB
-- true	 false


-- alternatively
-- this allows you to select a particular variable or a column 
-- and have multiple possible values for it.
SELECT
  CASE a WHEN 1 THEN 'true' ELSE 'false' END AS boolA,
  CASE b WHEN 1 THEN 'true' ELSE 'false' END AS boolB 
  FROM booltest
;

DROP TABLE IF EXISTS booltest;
